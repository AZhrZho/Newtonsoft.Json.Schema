<?xml version="1.0" encoding="utf-8"?>
<topic id="GeneratingSchemas" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Json.NET Schema represents schemas using the strongly typed <codeEntityReference>T:Newtonsoft.Json.Schema.JSchema</codeEntityReference> object.</para>
    </introduction>

<alert class="information">
  <para>
    You do not need to specify the version of the JSON Schema you are loading. When loading an older schema (e.g. draft 3) renamed properties and features will automatically be mapped to their new names.
  </para>
</alert>


<section>
  <title>Generate JSON Schemas from .NET types</title>
<content>
<para>Schema generation is performed by the <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> object. It will map .NET objects, collections, properties and their attributes to their JSON Schema equivilent. The generated schema will successfully validate JSON produced when serializing instances of that type.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="PersonClass" title=".NET type" />

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="BasicGeneration" title="Generate a JSON Schema from a .NET type" />

<para><codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> has a number of options to customize output. An <codeEntityReference>T:Newtonsoft.Json.Serialization.IContractResolver</codeEntityReference> will customize how the type's properties and collections will be reflected over.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="IContractResolver" title="Generate a JSON Schema using a IContractResolver" />

<codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaUndefinedIdHandling</codeEntityReference> is used to control whether types with no ID defined have one infered from their type name.

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="JSchemaUndefinedIdHandling" title="Generate a JSON Schema using JSchemaUndefinedIdHandling" />

</content>
</section>


<section>
  <title>Using Data Annotation attributes</title>
<content>
<para><codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference> will look for .NET Data Annotation attributes when generating a schema.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="BuildingClass" title=".NET type with Data Annotations" />

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="DataAnnotations" title="Schema generation with Data Annotations" />

<para>The Data Annotation attributes used when generating a schema and their effect:</para>

<table>
  <tableHeader>
    <row>
      <entry><para>Data Annotation</para></entry>
      <entry><para>Effect</para></entry>
    </row>
  </tableHeader>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.RequiredAttribute</codeEntityReference></para></entry>
    <entry><para>Property will be required.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.MinLengthAttribute</codeEntityReference></para></entry>
    <entry><para>minLength of a string or the minItems in an array.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.MaxLengthAttribute</codeEntityReference></para></entry>
    <entry><para>maxLength of a string or the maxItems in an array.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute</codeEntityReference></para></entry>
    <entry><para>String pattern.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.RangeAttribute</codeEntityReference></para></entry>
    <entry><para>Number min and max values.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.StringLengthAttribute</codeEntityReference></para></entry>
    <entry><para>String minLength and maxLength.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute</codeEntityReference></para></entry>
    <entry><para><codeEntityReference>T:System.Enum</codeEntityReference> type used to generate enum values from.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.DataTypeAttribute</codeEntityReference></para></entry>
    <entry><para>String format depending on the <codeEntityReference>T:System.ComponentModel.DataAnnotations.DataType</codeEntityReference> value. Supports Url, Date, Time, DateTime, EmailAddress, PhoneNumber.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.UrlAttribute</codeEntityReference></para></entry>
    <entry><para>String uri format.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.PhoneAttribute</codeEntityReference></para></entry>
    <entry><para>String phone format.</para></entry>
  </row>
  <row>
    <entry><para><codeEntityReference>T:System.ComponentModel.DataAnnotations.EmailAddressAttribute</codeEntityReference></para></entry>
    <entry><para>String email format.</para></entry>
  </row>
</table>

</content>
</section>


<section>
  <title>Control Schema Generation with JSchemaGenerationProvider</title>
<content>

<para><codeEntityReference>T:Newtonsoft.Json.Schema.Generation.JSchemaGenerationProvider</codeEntityReference> lets you take over schema generation for a type. An example of where this is useful is changing the schema generation for <codeEntityReference>T:System.Enum</codeEntityReference> types from int enum values to string enum values.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="BuildingClass" title=".NET type with Data Annotations" />

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\GeneratingSchemas.cs" region="JSchemaGenerationProvider" title="Schema generation with JSchemaGenerationProvider" />

<para>Json.NET Schema includes <codeEntityReference>T:Newtonsoft.Json.Schema.Generation.StringEnumGenerationProvider</codeEntityReference>. Additional schema providers can be created be inheriting from <codeEntityReference>T:Newtonsoft.Json.Schema.Generation.JSchemaGenerationProvider</codeEntityReference></para>.

</content>
</section>


    <relatedTopics>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaGenerator</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaUndefinedIdHandling</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.Generation.JSchemaGenerationProvider</codeEntityReference>
    </relatedTopics>

  </developerConceptualDocument>
</topic>