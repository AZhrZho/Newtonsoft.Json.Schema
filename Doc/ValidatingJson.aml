<?xml version="1.0" encoding="utf-8"?>
<topic id="ValidatingJson" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Json.NET Schema represents schemas using the strongly typed <codeEntityReference>T:Newtonsoft.Json.Schema.JSchema</codeEntityReference> object.</para>
    </introduction>

<alert class="information">
  <para>
    You do not need to specify the version of the JSON Schema you are loading. When loading an older schema (e.g. draft 3) renamed properties and features will automatically be mapped to their new names.
  </para>
</alert>


<section>
  <title>Validating with JSON Schema</title>
<content>
<para>The simplest way to check if JSON is valid is to load the JSON into a JObject or JArray and then
use the <codeEntityReference>M:Newtonsoft.Json.Schema.SchemaExtensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JSchema)</codeEntityReference>
method with the JSON Schema.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\ValidatingJson.cs" region="IsValidBasic" title="Validate JSON with IsValid" />

<para>To get validation error messages use the
<codeEntityReference>M:Newtonsoft.Json.Schema.SchemaExtensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JSchema,System.Collections.Generic.IList{System.String}@)</codeEntityReference>
or
<codeEntityReference>M:Newtonsoft.Json.Schema.SchemaExtensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JSchema,Newtonsoft.Json.Schema.SchemaValidationEventHandler)</codeEntityReference>
overloads.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\ValidatingJson.cs" region="IsValidMessages" title="Validate JSON with IsValid" />
</content>
</section>

<section>
  <title>Validating when reading JSON</title>
<content>

<para>Internally IsValid uses <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaValidatingReader</codeEntityReference>
to perform the JSON Schema validation. To skip the overhead of loading JSON into a JObject/JArray, validating
the JSON and then deserializing the JSON into a class, <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaValidatingReader</codeEntityReference> can be used with JsonSerializer to validate JSON while the object is being deserialized.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\ValidatingJson.cs" region="JSchemaValidatingReader" title="Validate JSON with JSchemaValidatingReader" />

</content>
</section>

<section>
  <title>Validating when writing JSON</title>
<content>

<para>JSON can also be validated while writing JSON with <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaValidatingWriter</codeEntityReference>.</para>

<code lang="cs" source="..\Src\Newtonsoft.Json.Schema.Tests\Documentation\ValidatingJson.cs" region="JSchemaValidatingWriter" title="Validate JSON with JSchemaValidatingWriter" />

</content>
</section>


    <relatedTopics>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchema</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaResolver</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaUrlResolver</codeEntityReference>
      <codeEntityReference>T:Newtonsoft.Json.Schema.JSchemaPreloadedResolver</codeEntityReference>
    </relatedTopics>

  </developerConceptualDocument>
</topic>